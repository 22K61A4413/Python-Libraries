{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM7Od+DbQ2Mgm4eDvv7Amyt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/22K61A4413/Python-Libraries/blob/main/Numpy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-DCGsuTCUwnZ"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([1,2,3])\n",
        "array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFd1iac6VQKy",
        "outputId": "18b273de-3146-41d5-b1e0-8ce0365ca48a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.arange(10)\n",
        "array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YMT-4lpYVcxA",
        "outputId": "b173c68f-cfe8-448e-db9f-fe274829d9ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.arange(1,10,2)\n",
        "array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0sHaaRIVw46",
        "outputId": "b1bbd2a4-c03f-4fb2-fb5a-a47871db552b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 3, 5, 7, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# n-Dimensional arrays\n",
        "arr1=np.array([1,2,3])\n",
        "print(\"1-Dim array\", arr1)\n",
        "arr2=np.array([[1,2,3],\n",
        "               [4,5,6]])\n",
        "print(\"2-Dim array\", arr2)\n",
        "print(\"size,shape:\",arr2.dtype,arr2.shape)\n",
        "arr3=np.array([[[1,2,3],\n",
        "               [4,5,6],\n",
        "              [7,8,9]]])\n",
        "print(\"2-Dim array\", arr3)\n",
        "print(\"size,shape:\",arr3.dtype,arr3.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MCreYylRWgmt",
        "outputId": "96fa45aa-d9a3-4c0a-8042-8ff182e470e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1-Dim array [1 2 3]\n",
            "2-Dim array [[1 2 3]\n",
            " [4 5 6]]\n",
            "size,shape: int64 (2, 3)\n",
            "2-Dim array [[[1 2 3]\n",
            "  [4 5 6]\n",
            "  [7 8 9]]]\n",
            "size,shape: int64 (1, 3, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dtype\n",
        "array_int=np.array([1.0,2.0,3.0],dtype=int)\n",
        "array_int"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6tULPCNXtbu",
        "outputId": "1a299896-3904-4626-900b-20d54157e29e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array_float=np.array([1,2,3],dtype=float)\n",
        "array_float"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wfIQr106YMpr",
        "outputId": "b2edb54c-076a-4e9c-cd6c-984ec7154a54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1., 2., 3.])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#zeros()\n",
        "array=np.zeros((2,3,4),dtype=int)\n",
        "array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhkdeWuTYQfI",
        "outputId": "3ac72003-a500-45b6-d83e-e50bf60d569a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0, 0, 0, 0],\n",
              "        [0, 0, 0, 0],\n",
              "        [0, 0, 0, 0]],\n",
              "\n",
              "       [[0, 0, 0, 0],\n",
              "        [0, 0, 0, 0],\n",
              "        [0, 0, 0, 0]]])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ones\n",
        "array=np.ones((3,4,5),dtype=float)\n",
        "print(array)\n",
        "print(\"\\n\")\n",
        "#Dimensions,itemsize\n",
        "print(\"Dimensions:\",array.ndim)\n",
        "print(\"Item size:\",array.itemsize,\"bits\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XaaxW_cBYtoE",
        "outputId": "88516059-8bf6-4541-ae1e-23a186346b6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]]\n",
            "\n",
            " [[1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]]\n",
            "\n",
            " [[1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]\n",
            "  [1. 1. 1. 1. 1.]]]\n",
            "\n",
            "\n",
            "Dimensions: 3\n",
            "Item size: 8 bits\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#datatypes\n",
        "arr1=np.array([1,2,3],dtype=int)\n",
        "print(\"integer array:\",arr1)\n",
        "arr1=np.array([1,2,3],dtype=float)\n",
        "print(\"float array:\",arr1)\n",
        "arr1=np.array([1,2,3],dtype=bool)\n",
        "print(\"boolean array:\",arr1)\n",
        "arr1=np.array([1,2,3],dtype=complex)\n",
        "print(\"complex array:\",arr1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3YrXbGW8Z1Gf",
        "outputId": "136554b0-e575-414e-b25c-7cfe1d48113a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "integer array: [1 2 3]\n",
            "float array: [1. 2. 3.]\n",
            "boolean array: [ True  True  True]\n",
            "complex array: [1.+0.j 2.+0.j 3.+0.j]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#full\n",
        "array=np.full((2,3),15,dtype=float)\n",
        "array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nwLTHUdQaqPY",
        "outputId": "30d9dc1e-dfa3-43be-bcbc-4e2c27832870"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[15., 15., 15.],\n",
              "       [15., 15., 15.]])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Array Operations**"
      ],
      "metadata": {
        "id": "gB2RSd1hbBFM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1)Arithmetic Operations"
      ],
      "metadata": {
        "id": "3K5gGgl6cyH4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr_sum=np.add([1,2,3],[4,5,6])\n",
        "print(\"Sum of arrays:\",arr_sum)\n",
        "arr_sub=np.subtract([4,5,6],[1,2,3])\n",
        "print(\"Subtraction of arrays:\",arr_sub)\n",
        "arr_mul=np.multiply([1,2,3],[1,2,3])\n",
        "print(\"Multiplication of array:\",arr_mul)\n",
        "arr_div=np.divide([1,2,3],[1,2,3])\n",
        "print(\"Division of arrays:\",arr_div)\n",
        "arr_mod=np.mod([12,14,15],[6,7,5])\n",
        "print(\"Remainder:\",arr_mod)\n",
        "arr_pow=np.pow([1,2,3],[2,2,2])\n",
        "print(\"Power of an array:\",arr_pow)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5jhNuCXbAbM",
        "outputId": "7a5492ef-f77e-4e4a-90f0-bcd23c6cf747"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum of arrays: [5 7 9]\n",
            "Subtraction of arrays: [3 3 3]\n",
            "Multiplication of array: [1 4 9]\n",
            "Division of arrays: [1. 1. 1.]\n",
            "Remainder: [0 0 0]\n",
            "Exponential array: [1 4 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr1=np.array([1,2,3])\n",
        "arr2=np.array([3,4,5])\n",
        "print(arr1+arr2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jZJ0cqTucYIE",
        "outputId": "b15ac8ca-a170-44d8-d476-6be4a98b7b18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4 6 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2)Relational Operations"
      ],
      "metadata": {
        "id": "h2Xs38qwclMd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr1=[1,2,3]\n",
        "arr2=[1,2,3]\n",
        "print(\"==\",arr1==arr2)\n",
        "print(\"<\",arr1<arr2)\n",
        "print(\"<=\",arr1<=arr2)\n",
        "print(\">\",arr1>arr2)\n",
        "print(\">=\",arr1>=arr2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQx-ga2kc8Os",
        "outputId": "8bdbc691-5f38-4a81-8c90-fa76c4ff9056"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== True\n",
            "< False\n",
            "<= True\n",
            "> False\n",
            ">= True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Indexing and Slicing"
      ],
      "metadata": {
        "id": "r-t5e3v6d-z3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([[1,2,3],[4,5,6]])\n",
        "print(array[0:1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z5g2-DXOeDjx",
        "outputId": "089e3597-1647-49ba-e9b7-7892a448f622"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#1d\n",
        "array=np.array([1,2,3,4,5,6,7,8])\n",
        "print(array[0:7:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sF1WyzABe3pZ",
        "outputId": "b81a3fba-08c5-4096-cb64-0fb8586260d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 4 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2d\n",
        "array=np.array([[1,2,3],[4,5,6]])\n",
        "print(array[0:1,1:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hbTCRIBwfKlg",
        "outputId": "f85407d6-b656-40f4-801a-2ce133caf747"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[2 3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Boolean Slicing"
      ],
      "metadata": {
        "id": "O-QjWZdXfUxg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([1,2,3,4,5])\n",
        "mask=array>3\n",
        "print(array[mask])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dSZCJi42fUWV",
        "outputId": "6518f50b-37aa-4256-ff61-4eb19c78fb2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fancy Indexing"
      ],
      "metadata": {
        "id": "gK0RbdJqfwJW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([1,2,3,4,5])\n",
        "indices=[0,3,4]\n",
        "print(array[indices])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MQSZhBYFfuoy",
        "outputId": "3218428a-a859-4b4e-8ec6-5a8cdaaa2055"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plaing with arrays"
      ],
      "metadata": {
        "id": "jH7uXE2NhAq7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Transpose of array\n",
        "arr=np.array([[1,2,3],[4,5,6]])\n",
        "print(\"Original Array:\",arr,\"Shape:\",arr.shape,\"Size:\",arr.size)\n",
        "transpose_arr=arr.T\n",
        "print(\"Transpose Array:\",transpose_arr,\"Shape:\",transpose_arr.shape,\"Size:\",transpose_arr.size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JYv52L-8gsQZ",
        "outputId": "449c826c-56c0-4404-fb98-9da2dffa7b6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Array: [[1 2 3]\n",
            " [4 5 6]] Shape: (2, 3) Size: 6\n",
            "Transpose Array: [[1 4]\n",
            " [2 5]\n",
            " [3 6]] Shape: (3, 2) Size: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Swapping of array\n",
        "arr=np.array([[1,2,3],[4,5,6]])\n",
        "print(\"Original Array:\",arr,\"Shape:\",arr.shape,\"Size:\",arr.size)\n",
        "swap=arr.swapaxes(1,0)\n",
        "print(\"Swapped Array:\",swap,\"Shape:\",swap.shape,\"Size:\",swap.size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZ7b1Sr2hoOU",
        "outputId": "ceb23270-44c3-4db2-d041-f95eb73bd4ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Array: [[1 2 3]\n",
            " [4 5 6]] Shape: (2, 3) Size: 6\n",
            "Swapped Array: [[1 4]\n",
            " [2 5]\n",
            " [3 6]] Shape: (3, 2) Size: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#random numers\n",
        "array=np.random.randint(1,10,size=5)\n",
        "print(array)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a_GGOoZ2h2eK",
        "outputId": "a4c7c20c-caf2-443b-985b-4ff2584b6404"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4 7 6 3 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([1,2,3,4])\n",
        "reshaped_array=array.reshape(2,2)\n",
        "print(reshaped_array)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IVQyzVTkiOwn",
        "outputId": "bddb8980-7445-4caa-905e-0bf434447ead"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2]\n",
            " [3 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aggregate Functions"
      ],
      "metadata": {
        "id": "ttxVwfMYiyjx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([16,28,387,9473,92368])\n",
        "print(\"Sum:\",np.sum(array))\n",
        "print(\"Min:\",np.min(array))\n",
        "print(\"Max:\",np.max(array))\n",
        "print(\"Mean:\",np.mean(array))\n",
        "print(\"Median:\",np.median(array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pWcNc6Dviwn5",
        "outputId": "cb289524-8a0f-401f-b8a8-e30cb86b4f3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum: 102272\n",
            "Min: 16\n",
            "Max: 92368\n",
            "Mean: 20454.4\n",
            "Median: 387.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Universal Functions"
      ],
      "metadata": {
        "id": "cqLd9nrajR2t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Basic arithmetic\n",
        "arr=np.array([1,2,3,4,5])\n",
        "print(\"ADDITION: \",np.add(arr,3))\n",
        "print(\"\\n\")\n",
        "#Trignometric functions\n",
        "print(\"sin76:\",np.sin(76))\n",
        "print(\"\\n\")\n",
        "#Exponential\n",
        "print(\"exponential array:\",np.exp(arr))\n",
        "print(\"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dvRpdV2SjQjV",
        "outputId": "41dc53a0-b759-430c-a9a8-ec879c34db1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADDITION:  [4 5 6 7 8]\n",
            "\n",
            "\n",
            "sin76: 0.5661076368981803\n",
            "\n",
            "\n",
            "exponential array: [  2.71828183   7.3890561   20.08553692  54.59815003 148.4131591 ]\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Array Manipulation"
      ],
      "metadata": {
        "id": "K_2GYTLvkh9p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([265,387,846,973,836,678])\n",
        "print(\"RESHAPE: \",np.reshape(array,(2,3)))\n",
        "print(\"RESIZE: \",np.resize(array,(2,2)))\n",
        "print(\"RAVEL: \",np.ravel(array))\n",
        "print(\"FLATTEN: \",array.flatten())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Skr2_fb4ke1e",
        "outputId": "15c6243c-5e26-4600-a201-b4ec21a6e8eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RESHAPE:  [[265 387 846]\n",
            " [973 836 678]]\n",
            "RESIZE:  [[265 387]\n",
            " [846 973]]\n",
            "RAVEL:  [265 387 846 973 836 678]\n",
            "FLATTEN:  [265 387 846 973 836 678]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Splitting & Joining"
      ],
      "metadata": {
        "id": "hmB3pnCTlk5F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "array=np.array([234,874,287,677,197,762])\n",
        "print(\"Splitted array:\",np.split(array,3))\n",
        "print(\"hsplit:\",np.hsplit(array,2))\n",
        "print(\"hstack:\",np.hstack(array))\n",
        "print(\"vstack:\",np.vstack(array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPVGpvuVmVw0",
        "outputId": "b12a9142-4168-4792-e88f-37160b7f7970"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Splitted array: [array([234, 874]), array([287, 677]), array([197, 762])]\n",
            "hsplit: [array([234, 874, 287]), array([677, 197, 762])]\n",
            "hstack: [234 874 287 677 197 762]\n",
            "vstack: [[234]\n",
            " [874]\n",
            " [287]\n",
            " [677]\n",
            " [197]\n",
            " [762]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Adding & Deleting"
      ],
      "metadata": {
        "id": "5Las4pMvnNUu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#adding\n",
        "arr=np.array([1,2,3,4,5])\n",
        "print(np.append(arr,6))\n",
        "#insert\n",
        "arr=np.array([1,2,3,4,5])\n",
        "print(np.insert(arr,3,(67)))\n",
        "#delete\n",
        "arr=np.array([1,2,3,4,5])\n",
        "print(np.delete(arr,4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xHw1s5KHnQ-1",
        "outputId": "14d311e6-ae08-4202-9d21-6da5bffc4e94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5 6]\n",
            "[ 1  2  3 67  4  5]\n",
            "[1 2 3 4]\n"
          ]
        }
      ]
    }
  ]
}